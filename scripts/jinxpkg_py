#! /usr/bin/python

import argparse
import logging
import os
import sys
import subprocess
import json
from distutils import file_util, dir_util
import builtins
import jinxpkg

ARGPARSER = None
ARGS = None
PROG = "jinxpkg"
DEFAULT_GIT = "https://github.com/mhamid3d/{}.git"
DEFAULT_PUBLISH = os.path.abspath("/tools")

LOGGER = logging.getLogger("jinxpkg")
LOGGER.setLevel(logging.DEBUG)
logging.basicConfig()


def init_opt():
    global ARGPARSER

    ARGPARSER = argparse.ArgumentParser(
        description="""
        Pipeline Package Management & Information
        --------------------------------------------
        """,
        prog=PROG,
        formatter_class=argparse.HelpFormatter
    )
    ARGPARSER.add_argument(
        "action", action="store", metavar="",
        help="""
                            create: This command sets up and configures a new module for jinxpkg. To use this, create the
                            repository in github and keep it empty. Change to the directory where the source will
                            be contained. This should be in a _dev directory (eg: /_dev/tools/python). Pass the name
                            of the package with the -p flag, this must be the same name of the github repository.
                            It will the create the src directory and the python module. As well as the CONFIG file.
                            
        """
    )
    ARGPARSER.add_argument(
        "-p",
        "--package",
        dest="package",
        type=str,
        required=True,
        help="""
        Directory to clone the git repo to. The package will live here
             """
    )
    ARGPARSER.add_argument(
        "-g",
        "--git",
        dest="git",
        type=str,
        help="git repo name. If this is left empty it will search for the repo by the package name via -p"
    )
    ARGPARSER.add_argument(
        "-d",
        "--directory",
        dest="directory",
        default=DEFAULT_PUBLISH,
        type=str,
        help="Publish directory. If not given it will fallback to the default: {}".format(DEFAULT_PUBLISH)
    )
    ARGPARSER.add_argument(
        "-t",
        "--type",
        dest="type",
        default="JINX",
        type=str,
        help="""
        The subtype directory for the published tool. Default to JINX for global tools.
        If you need to publish your tool to a show, this is where you enter the showname.
        Alternativly you can enter USER, and it will publish the tool to the users directory
             """
    )
    ARGPARSER.add_argument(
        "-v",
        "--version",
        dest="version",
        type=str,
        help="""
            The version for a new publish. Should use this format: {MAJOR}_{MINOR}_{PATCH}
        """
    )


def validate_publish(args):
    package_name = args.package
    version = args.version
    local_path = os.path.abspath(args.package)
    publish_type = args.type
    publish_dir = os.path.join(args.directory, args.type)
    script_dir = os.path.join(local_path, "scripts")

    try:

        # ----- ASSERT LOCAL PACKAGE PATH EXISTS ----- #
        assert os.path.exists(local_path), "Package Dir Could Not Be Found At...{}".format(str(local_path))

        LOGGER.info("##### Package Path..........OK")

        # ----- ASSERT CONFIG FILE ----- #
        config_file = os.path.join(local_path, "CONFIG")
        assert os.path.exists(config_file), "Config File Could Not Be Found At...{}".format(str(config_file))
        with open(config_file, "r") as cf:
            data = json.load(cf)
            cf.close()

        required_keys = ["package", "context"]
        for key in required_keys:
            assert key in data.keys(), "Required key '{}' missing from CONFIG File".format(key)
            assert data[key], "Required key '{}' returns None in CONFIG File".format(key)

        assert str(data['package']) == str(args.package), "Given Package Name Doesn't Match With CONFIG Package Name!"

        LOGGER.info("##### Config File...........OK")

        # ----- ASSERT VERSION ----- #
        assert version, "No Version Was Given For The Publish"
        assert len(version.split("_")) == 3, "Invalid Version Given: {}. See --help for version syntax".format(version)

        target_dir = os.path.join(
            publish_dir, data['context'],
            data['package'],
            "{}-{}".format(data['package'], version)
        )
        assert not os.path.exists(
            target_dir
        ), "Package '{}' With Version '{}' Of Target '{}' Already Exists! Edit the Config version.".format(
            data['package'], version, args.type)

        LOGGER.info("##### Publish Version.......OK")

        # ----- ASSERT SOURCE FILES EXISTS ----- #
        source_dir = os.path.join(local_path, "src", data['package'])
        assert os.path.exists(source_dir), "Source Dir Could Not Be Found At...{}".format(str(source_dir))

        LOGGER.info("##### Source Files..........OK")

        return package_name, source_dir, script_dir, publish_dir, version, data['context']

    except AssertionError as ae:

        LOGGER.error(ae.args[0])

        return False


def main():
    init_opt()
    global ARGS

    ARGS = ARGPARSER.parse_args()

    if ARGS.action == "create":
        package_name = ARGS.package
        git_name = ARGS.git
        git_addr = DEFAULT_GIT.format(git_name) if git_name else DEFAULT_GIT.format(package_name)
        pkg_dir = os.path.abspath(package_name)

        LOGGER.info("Fetching repository from Git Address: {}".format(git_addr))
        LOGGER.info("Target directory: {}".format(pkg_dir))

        subprocess.call(["git", "clone", git_addr, pkg_dir])

        LOGGER.info("Making template directories...")

        os.mkdir(os.path.join(pkg_dir, "src"))
        os.mkdir(os.path.join(pkg_dir, "src", package_name))
        #TODO: create __version__ attribute in the init file.
        src_init = open(os.path.join(pkg_dir, "src", package_name, "__init__.py"), "w+")
        src_init.close()
        os.mkdir(os.path.join(pkg_dir, "tests"))
        os.mkdir(os.path.join(pkg_dir, "scripts"))

        LOGGER.info("Creating CONFIG file...")
        config_path = os.path.join(pkg_dir, "CONFIG")
        config_file = open(config_path, "w+")
        config_file.close()

        config_data = {
            "package": package_name,
            "version": "1_0_0",
        }
        LOGGER.info("Writing CONFIG data...")
        with open(config_path, "w+") as cf:
            json.dump(config_data, cf, indent=4, sort_keys=True, )
            cf.close()

    elif ARGS.action == "publish":
        is_valid = validate_publish(ARGS)
        if is_valid:
            package_name, source_dir, script_dir, publish_dir, version, source_ctx = is_valid
            target_source = os.path.join(publish_dir, source_ctx, package_name)
            module_dir = os.path.join(target_source, "{}-{}".format(package_name, version))
            LOGGER.info("##### Making Directories...")
            if not os.path.exists(target_source):
                os.makedirs(module_dir)
                jinxpkg.make_package_init(target_source)
                LOGGER.info("##### Creating Version Entry...")
            else:
                os.makedirs(module_dir)
            LOGGER.info("##### Copying Files...")
            dir_util.copy_tree(source_dir, module_dir)
            jinxpkg.make_version_file(module_dir, version)
            if os.path.exists(script_dir) and os.listdir(script_dir):
                LOGGER.info("##### Publishing Scripts...")
                for script in os.listdir(script_dir):
                    script_file = os.path.join(script_dir, script)
                    if not os.path.isdir(script_file):
                        script_name_agnostic = str(script).replace("_py", "")
                        target_script_file = os.path.join(publish_dir, "scripts", script_name_agnostic)
                        file_util.copy_file(script_file, target_script_file)
            LOGGER.info("#####  DONE | {} is now published!".format(os.path.basename(os.path.normpath(module_dir))))
            set_this_version = builtins.input("Set this version as latest on {} ? (y/n): ".format(ARGS.type))
            if set_this_version.lower() == "y":
                jinxpkg.update_version(package=package_name, version=version)


if __name__ == '__main__':
    main()
    sys.exit(0)
